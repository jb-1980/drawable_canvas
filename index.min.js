const Canvas=function(width,height){this.node=document.createElement('canvas')
this.node.width=width||window.innerWidth
this.node.height=height||window.innerHeight
this.context=this.node.getContext('2d')
this.isDrawing=!1
this.x=0
this.y=0
this.currentState=undefined
this.history=[]
this.updateState=state=>{this.history.push(this.currentState)
this.currentState=state}}
const Colors=function(colors){this.node=document.createElement('div')
this.node.classList.add('colors')
colors.forEach(color=>this.node.appendChild(color))}
const Color=function(color){this.node=document.createElement('div')
this.node.classList.add('color')
this.node.style.backgroundColor=color}
const init=function(container){let canvas=new Canvas()
let ctx=canvas.context
ctx.strokeStyle='#000'
ctx.lineJoin='round'
ctx.lineCap='round'
ctx.lineWidth=2
canvas.node.onmousemove=event=>{if(!canvas.isDrawing)return
ctx.beginPath()
ctx.moveTo(canvas.x,canvas.y)
ctx.lineTo(event.offsetX,event.offsetY)
ctx.stroke()
canvas.x=event.offsetX
canvas.y=event.offsetY}
canvas.node.onmousedown=event=>{canvas.isDrawing=!0
canvas.x=event.offsetX
canvas.y=event.offsetY}
canvas.node.onmouseup=event=>{canvas.isDrawing=!1
canvas.updateState(ctx.getImageData(0,0,canvas.node.width,canvas.node.height))}
canvas.node.onmouseout=event=>{if(canvas.isDrawing){canvas.updateState(ctx.getImageData(0,0,canvas.node.width,canvas.node.height))
canvas.isDrawing=!1}}
const colors=['#000','#f44336','#9C27B0','#E91E63','#3F51B5','#009688','#FF9800','#FF5722',].map(color=>{let colorNode=new Color(color).node
colorNode.onclick=event=>{let colorNodes=document.querySelectorAll('.color')
colorNodes.forEach(node=>{if(event.target===node){node.innerHTML='&#9998;'}else if(node.id!=='undo'){node.innerHTML=''}})
let backgroundColor=event.target.style.backgroundColor
ctx.strokeStyle=backgroundColor}
return colorNode})
const undo=document.createElement('div')
undo.classList.add('color')
undo.id='undo'
undo.innerHTML='&cularr;'
undo.style.color='#000'
undo.onclick=event=>{let previousState=canvas.history.pop()
if(previousState){ctx.putImageData(previousState,0,0)
canvas.currentState=previousState}else{ctx.clearRect(0,0,canvas.node.width,canvas.node.height)
canvas.currentState=previousState}}
colors.unshift(undo)
const colorsDiv=new Colors(colors)
container.appendChild(canvas.node)
container.appendChild(colorsDiv.node)}
const container=document.getElementById('canvas')
init(container)
